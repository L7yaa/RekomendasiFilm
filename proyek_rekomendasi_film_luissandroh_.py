# -*- coding: utf-8 -*-
"""Proyek_Rekomendasi_Film_LuissandroH_.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fChBIardc4Vy-h99OTBjEUBXNOcltGxB

# **1. Perkenalan Dataset**

Dataset: https://www.kaggle.com/datasets/parasharmanas/movie-recommendation-system

Dataset Rekomendasi Film yang diunggah oleh Parasharmanas di Kaggle berisi informasi tentang berbagai film serta rating yang diberikan oleh pengguna. Dataset ini biasanya digunakan untuk membangun sistem rekomendasi berbasis konten yang berfokus pada genre, deskripsi, dan fitur lainnya untuk memberikan rekomendasi film kepada pengguna.


Dataset ini terdiri dari dua file CSV utama:

- movies.csv: Berisi informasi tentang film, termasuk:

        movieId: ID unik untuk setiap film.

        title: Nama film.

        genres: Genre film, yang dapat terdiri dari beberapa kategori, misalnya "Action", "Comedy", "Drama", dll.

- ratings.csv: Berisi rating yang diberikan oleh pengguna terhadap film, dengan kolom-kolom berikut:

        userId: ID unik untuk setiap pengguna.

        movieId: ID film yang diberikan rating.

        rating: Rating yang diberikan oleh pengguna pada skala 1 hingga 5.

        timestamp: Waktu saat rating diberikan.

# **2. Import Library**

Pada tahap ini, Anda perlu mengimpor beberapa pustaka (library) Python yang dibutuhkan untuk analisis data dan pembangunan model machine learning.
"""

import pandas as pd
import os
import zipfile
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
!pip install -q kaggle
from google.colab import files
from sklearn.model_selection import train_test_split
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint, ReduceLROnPlateau
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.pipeline import Pipeline
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Embedding, Input, Dot, Flatten, Dense
from tensorflow.keras.optimizers import Adam
import random
from tensorflow.keras.regularizers import l2
from tensorflow.keras.layers import Embedding, Dense, Dot, Flatten, Dropout, BatchNormalization
from tensorflow.keras.layers import Concatenate, Input
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.metrics.pairwise import linear_kernel
from sklearn.feature_extraction.text import TfidfVectorizer

"""# **3. Memuat Dataset**

Untuk memuat dataset Anda menggunakan pustaka pandas sesuai dengan dataset yang telah Anda unduh dari Kaggle, Anda hanya perlu memeriksa beberapa baris pertama untuk memastikan bahwa data telah dimuat dengan benar. Anda sudah memuat dataset menggunakan pd.read_csv() di tahap sebelumnya, jadi Anda hanya perlu memeriksa beberapa baris pertama dari data.

Mengunggah file ke dalam Notebook colab. Pada Proyek ini menggunakan file Kaggle.json untuk otentikasi dataset yang bersumber dari kaggle
"""

uploaded = files.upload()

"""mengonfigurasi Kaggle API untuk mengakses dataset dari Kaggle menggunakan file kredensial yang telah diunggah."""

os.makedirs(os.path.expanduser('~/.kaggle'), exist_ok=True)
os.rename('kaggle.json', os.path.expanduser('~/.kaggle/kaggle.json'))
!chmod 600 ~/.kaggle/kaggle.json

"""mengunduh file ZIP yang berisi dataset Movie Recommendation System ke direktori."""

!kaggle datasets download -d parasharmanas/movie-recommendation-system

"""mengekstrak file ZIP yang telah diunduh dari Kaggle ke direktori tertentu di Google Colab"""

!unzip -q movie-recommendation-system.zip -d /content/movie-recommendation-system

""" menampilkan daftar file yang ada di dalam folder /content/movie-recommendation-system, untuk memverifikasi file apa saja yang telah berhasil diekstrak dari file ZIP."""

extracted_dir = "/content/movie-recommendation-system"
print("Isi direktori dataset:")
print(os.listdir(extracted_dir))

""" menyimpan lokasi file dalam dua variabel berbeda, yaitu movies_path untuk file film dan ratings_path untuk file rating dan kedua variabel ini akan digunakan untuk memuat data ke dalam DataFrame.

 insight: Menetapkan path untuk file CSV yang berisi data film dan data rating.
"""

movies_path = '/content/movie-recommendation-system/movies.csv'
ratings_path = '/content/movie-recommendation-system/ratings.csv'

"""- movies_df berisi data tentang film
- ratings_df berisi data tentang rating yang diberikan pengguna kepada film-film tertentu


insight: Memuat file CSV untuk data film dan rating ke dalam dua DataFrame terpisah
"""

movies_df = pd.read_csv(movies_path)
ratings_df = pd.read_csv(ratings_path)

"""Mengambil hanya 10.000 baris pertama dari data

insight: Dilakukan untuk mengurangi ukuran data agar lebih mudah diproses.
"""

movies_slice = movies_df.head(10000)
ratings_slice = ratings_df.head(10000)

"""Menyimpan hasilnya ke file CSV

insight: Menyimpan data yang telah dipotong ke dalam csv
"""

movies_slice.to_csv("movies_slice.csv", index=False)
ratings_slice.to_csv("ratings_slice.csv", index=False)

"""dataset yang sudah dislicing

insight: Memuat kembali file CSV yang telah disimpan memastikan bahwa proses pemotongan dan penyimpanan berjalan dengan baik dan data siap untuk digunakan lebih lanjut.
"""

movies_df = pd.read_csv("movies_slice.csv")
ratings_df = pd.read_csv("ratings_slice.csv")

"""# **4. Data Understanding**

Menampilkan jumlah data pada masing-masing dataset

insight: Hasil yang ditampilkan adalah jumlah total data untuk film dan rating, serta jumlah total keseluruhan dari kedua dataset tersebut.
"""

print(f"Jumlah data movie: {len(movies_df)}")
print(f"Jumlah data rating: {len(ratings_df)}")
print(f"Total data: {len(movies_df) + len(ratings_df)}")

"""- Menampilkan contoh data movie
- Menampilkan contoh data rating

insight: menampilkan 5 baris pertama dari data film dan rating
"""

print("\nContoh data movie:")
print(movies_df.head())
print("\nContoh data rating:")
print(ratings_df.head())

"""- Menampilkan info struktur data movie
- Menampilkan info struktur data rating

insight: Dataset movies_df terdiri dari 10.000 film, dengan kolom movieId, title, dan genres. Kolom title dan genres berisi tipe data objek (teks), sementara movieId adalah angka. Dataset ratings_df terdiri dari 10.000 rating dengan kolom userId, movieId, rating, dan timestamp, yang semuanya bertipe numerik.
"""

print("\nInfo struktur data movie:")
print(movies_df.info())
print("\nInfo struktur data rating:")
print(ratings_df.info())

"""- Menampilkan statistik deskriptif data movie
- Menampilkan statistik deskriptif data rating

insight: Menampilkan statistik deskriptif yang memberikan informasi tentang jumlah data film dan statistik untuk kolom movieId. Kolom title tidak memiliki statistik numerik karena berisi teks. Menampilkan statistik deskriptif untuk kolom rating, memberikan gambaran tentang distribusi nilai rating, serta nilai minimum, maksimum, dan rata-rata rating.
"""

print("\nStatistik deskriptif data movie:")
print(movies_df.describe(include='all'))
print("\nStatistik deskriptif data rating:")
print(ratings_df.describe(include='all'))

"""# **5. Univariate Exploratory Data Analysis**

Eksplorasi Judul Film sering muncul

insight: Dataset memiliki 2 judul film unik. Film dengan judul paling sering muncul adalah "Men with Guns (1997)" yang muncul 2 kali, sementara judul lainnya hanya muncul sekali. Hasil ini menunjukkan bahwa ada duplikasi atau pengulangan pada beberapa film dalam dataset.
"""

print("\n--- Eksplorasi variabel 'Title' ---")
title_counts = movies_df['title'].value_counts()
print(f"Jumlah unik judul film: {title_counts.nunique()}")
print(f"Contoh 5 judul film yang paling sering muncul: {title_counts.head(5)}")

"""Eksplorasi Variabel Genre Film sering muncul

insight: Terdapat 19 genre film unik dalam dataset. Genre yang paling sering muncul adalah "Drama" dengan 5057 kemunculan, diikuti oleh genre lainnya seperti "Comedy", "Romance", dan "Thriller". Ini memberikan gambaran bahwa genre "Drama" lebih dominan dalam dataset dibandingkan genre lainnya.
"""

print("\n Eksplorasi variabel 'Genre'")
genre_counts = movies_df['genres'].str.split('|', expand=True).stack().value_counts()
print(f"Jumlah unik genre film: {genre_counts.nunique()}")
print(f"5 genre film yang paling banyak muncul: {genre_counts.head(5)}")

"""Eksplorasi Variabel Rating dari user

insight: Statistik deskriptif untuk rating menunjukkan bahwa dataset memiliki 10.000 rating dengan nilai rata-rata 3.59 dan standar deviasi 1.06. Nilai rating terendah adalah 0.5, sementara yang tertinggi adalah 5.0. Terdapat 10 nilai unik dalam rating yang digunakan, yang menunjukkan bahwa rating dibatasi pada angka-angka tertentu (mungkin 0.5 hingga 5.0).
"""

print("\n Eksplorasi variabel 'Rating'")
rating_stats = ratings_df['rating'].describe()
print("Statistik deskriptif dari rating:")
print(rating_stats)
print(f"Jumlah nilai unik pada rating: {ratings_df['rating'].nunique()}")
print(f"Rating terendah: {ratings_df['rating'].min()}")
print(f"Rating tertinggi: {ratings_df['rating'].max()}")

"""Eksplorasi distribusi rating per film

insight: Dataset ini terdiri dari 3.287 film yang memiliki rating. Rata-rata rating per film adalah 3.41, dengan standar deviasi 0.88. Rating per film bervariasi, dengan rating terendah adalah 0.5 dan tertinggi adalah 5.0. Statistik ini memberikan gambaran bahwa meskipun ada banyak film dengan rating, distribusi rating per film menunjukkan adanya variasi dalam penerimaan film oleh pengguna.
"""

print("\n--- Eksplorasi rating per film ---")
average_rating_per_movie = ratings_df.groupby('movieId')['rating'].mean()
print(f"Jumlah film yang memiliki rating: {average_rating_per_movie.count()}")
print(f"Rata-rata rating per film:\n{average_rating_per_movie.describe()}")

"""Eksplorasi rating berdasarkan user

insight:  distribusi rating per pengguna menunjukkan adanya beberapa pengguna yang sangat aktif dalam memberikan rating, sementara yang lainnya hanya memberikan beberapa rating.
"""

print("\n Eksplorasi rating per pengguna")
ratings_count_per_user = ratings_df.groupby('userId')['rating'].count()
print(f"Jumlah pengguna yang memberikan rating: {ratings_count_per_user.count()}")
print(f"Rata-rata rating per pengguna:\n{ratings_count_per_user.describe()}")

"""# **6. Data Preprocessing**

Menggabungkan Data Movies dan Ratings

insight: Dataset ratings_df dan movies_df digabungkan berdasarkan kolom movieId menggunakan metode left join, sehingga informasi genre dari dataset film ditambahkan ke dataset rating.
"""

movie_ratings_df = pd.merge(ratings_df, movies_df[['movieId', 'genres']], on='movieId', how='left')

"""Menampilkan baris awal setelah penggabungan data

insight: Setelah penggabungan, data yang ditampilkan meliputi userId, movieId, rating, timestamp, dan genres yang berasal dari kedua dataset tersebut.
"""

print("\n Cek data Setelah Penggabungan:")
print(movie_ratings_df.head())

"""Statistik Deskriptif setelah penggabungan data

insigth: Menampilkan statistik deskriptif untuk seluruh data setelah penggabungan. Kolom yang terlihat meliputi userId, movieId, rating, timestamp, dan genres. Statistik mencakup jumlah total data (count), nilai rata-rata, standar deviasi, nilai minimum dan maksimum, serta beberapa informasi lainnya.
Kolom genres menunjukkan adanya variasi genre yang cukup banyak dengan frekuensi genre tertentu yang lebih sering muncul.
"""

print("\nStatistik Deskriptif Data:")
print(movie_ratings_df.describe(include='all'))

"""# **7. Data Preparation**

Cek jumlah missing values

insight: memiliki 1806 missing values dan menghapus nilai yang hilang dari dataset menggunakan dropna() dan menyimpannya di movie_ratings_df_cleaned.
"""

print(f"Jumlah missing values sebelum diisi:\n{movie_ratings_df.isnull().sum()}")
movie_ratings_df_cleaned = movie_ratings_df.dropna()

"""Cek kembali missing values

insight: Setelah menghapus nilai yang hilang, tidak ada lagi nilai hilang pada dataset yang sudah dibersihkan (movie_ratings_df_cleaned).
"""

print(f"\nJumlah missing values setelah dihapus:\n{movie_ratings_df_cleaned.isnull().sum()}")

"""Menghapus duplikasi

insight: Sebelum menghapus duplikat, dataset movie_ratings_df memiliki 10.000 baris. Proses ini menggunakan drop_duplicates() untuk menghapus duplikat dari dataset dan menyimpannya di movie_ratings_df_cleaned.
"""

print(f"\nJumlah baris sebelum menghapus duplikat: {len(movie_ratings_df)}")
movie_ratings_df_cleaned = movie_ratings_df.drop_duplicates()

"""Cek apakah ada duplikasi setelah dihapus

insight: Setelah menghapus duplikat, jumlah baris pada dataset yang sudah dibersihkan tetap 10.000, yang menunjukkan bahwa tidak ada duplikat yang tersisa.
"""

print(f"\nJumlah baris setelah menghapus duplikat: {len(movie_ratings_df_cleaned)}")

"""Tipe data setiap kolomnya

insight: Ini memastikan bahwa kolom-kolom yang berisi data numerik (seperti userId, movieId, dan rating) memiliki tipe data yang sesuai.
"""

print("\nTipe data dari setiap kolom:")
print(movie_ratings_df.dtypes)

"""Pastikan kolom 'userId', 'movieId', dan 'rating' adalah tipe numerik

insight: Tipe data untuk kolom userId, movieId, dan rating dipastikan sesuai dengan tipe numerik yang tepat menggunakan metode .astype(int) untuk userId dan movieId, serta .astype(float) untuk rating.
"""

movie_ratings_df['userId'] = movie_ratings_df['userId'].astype(int)
movie_ratings_df['movieId'] = movie_ratings_df['movieId'].astype(int)
movie_ratings_df['rating'] = movie_ratings_df['rating'].astype(float)

"""- Cek hasil pembersihan data
- Statistik deskriptif untuk memahami distribusi data


insight: Setelah memastikan tipe data yang benar, data diperiksa dan statistik deskriptif dihitung untuk memahami distribusi data. Data yang ditampilkan mencakup kolom userId, movieId, rating, timestamp, dan genres dengan statistik deskriptif yang mencakup jumlah data, rata-rata, standar deviasi, nilai minimum dan maksimum, serta kuartil pertama dan ketiga.
"""

print("\nContoh data setelah pembersihan:")
print(movie_ratings_df.head())
print("\nStatistik Deskriptif Data Setelah Pembersihan:")
print(movie_ratings_df.describe(include='all'))

"""indeks berdasarkan judul film

insight: Secara keseluruhan, langkah ini memastikan bahwa data film diindeks berdasarkan judulnya, dengan duplikat yang dihapus untuk memastikan keunikan data berdasarkan judul film.
"""

indices = pd.Series(movies_df.index, index=movies_df['title']).drop_duplicates()

"""## **Modeling**

Menggunakan TfidfVectorizer untuk menghitung representasi genre

insight:  proses ini bertujuan untuk mengonversi genre teks dari dataset film menjadi representasi numerik yang dapat digunakan untuk analisis lebih lanjut atau dalam model pembelajaran mesin.
"""

tfidf = TfidfVectorizer(stop_words='english')
tfidf_matrix = tfidf.fit_transform(movies_df['genres'])

"""Menghitung cosine similarity antar film

insight:  sebuah matriks similiaritas yang menunjukkan seberapa mirip setiap pasangan film berdasarkan genre mereka.
"""

cosine_sim = cosine_similarity(tfidf_matrix)

"""Membuat DataFrame untuk cosine similarity

insight: DataFrame ini menyajikan nilai cosine similarity antara setiap pasangan film dalam bentuk tabel yang lebih mudah dibaca. Contoh data yang acak (5 film pertama) ditampilkan menggunakan sample(5) untuk memberikan gambaran tentang bagaimana film-film saling berhubungan berdasarkan genre mereka. Proses ini menghitung tingkat kesamaan antara film berdasarkan genre mereka, dan hasilnya disajikan dalam bentuk tabel cosine similarity yang memungkinkan untuk melihat film mana yang memiliki genre yang paling mirip dengan film lainnya.
"""

cosine_sim_df = pd.DataFrame(cosine_sim, index=movies_df['title'], columns=movies_df['title'])

cosine_sim_df = cosine_sim_df * 100
cosine_sim_df = cosine_sim_df.round(0).astype(int)
print('Shape:', cosine_sim_df.shape)
print("\nContoh cosine similarity (5 film acak):")
print(cosine_sim_df.sample(5, axis=1).sample(10, axis=0))

"""Sistem Rekomendasi

insight: Rekomendasi film ditampilkan bersama dengan genre mereka.
"""

def recommend(title, cosine_sim=cosine_sim, df=movies_df):
    if title not in indices:
        print(f"Judul '{title}' tidak ditemukan.")
        return

    idx = indices[title]
    sim_scores = list(enumerate(cosine_sim[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)[1:11]
    movie_indices = [i[0] for i in sim_scores]
    recommended_movies = df.iloc[movie_indices][['title', 'genres']].copy()
    recommended_movies.reset_index(drop=True, inplace=True)
    recommended_movies.index += 1

    print(f"\nRekomendasi film mirip dengan: '{title}':\n")
    return recommended_movies

"""Rekomendasi Film

insight: Hasilnya menampilkan 10 film yang memiliki kemiripan genre tertinggi. Fungsi ini memberikan rekomendasi film berdasarkan genre yang mirip dengan film yang dicari, menggunakan cosine similarity untuk mengukur kemiripan antar film. Output yang diberikan adalah daftar film yang mirip beserta genre mereka.
"""

recommendations = recommend("Snow Day (2000)")
print(recommendations)

"""# **9. Evaluasi**

Nilai Precision nya

insight: Fungsi ini menghitung dan menampilkan nilai precision dari rekomendasi film berdasarkan threshold cosine similarity. Hasil precision 1.00 berarti bahwa semua rekomendasi film untuk "Snow Day (2000)" relevan.
"""

def calculate_precision_for_recommendation(title, cosine_sim=cosine_sim, df=movies_df, threshold=0.5):
    if title not in indices:
        print(f"Judul '{title}' tidak ditemukan.")
        return 0

    idx = indices[title]
    sim_scores = list(enumerate(cosine_sim[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)[1:11]

    relevant_recommendations = sum([1 for score in sim_scores if score[1] > threshold])
    total_recommendations = len(sim_scores)
    precision = relevant_recommendations / total_recommendations if total_recommendations > 0 else 0

    return precision

title = "Snow Day (2000)"
precision = calculate_precision_for_recommendation(title, cosine_sim=cosine_sim, df=movies_df, threshold=0.5)

print(f"Precision untuk rekomendasi film mirip dengan '{title}': {precision:.2f}")